var documenterSearchIndex = {"docs":
[{"location":"API/analytics/","page":"Analytics","title":"Analytics","text":"CurrentModule = SegmentAnalytics","category":"page"},{"location":"API/analytics/","page":"Analytics","title":"Analytics","text":"Analytics\ntrack","category":"page"},{"location":"API/analytics/#SegmentAnalytics.Analytics","page":"Analytics","title":"SegmentAnalytics.Analytics","text":"mutable struct Analytics\n\nThe type for holding segment configuration and segment state \n\nfunction Analytics(;options...)\n\nReturn instance of Analytics initialized with giving options\n\nRequired arguments\n\nwrite_key::String: Segment write key\n\nOptional arguments\n\nbatch_size::Integer: Max size of batch of messages that will be send to Segment. By default equal to 100\non_error::Function: Function that will be executed when there is error from segment API\n\nArguments for transport configuration\n\nhost::String\nport::Integer\nssl::Bool\nheaders::Dict\npath::String\nretries::Integer\nbackoff_policy::BackoffPolicy\n\nExample\n\nanalytics = SegmentAnalytics.Analytics(\n  write_key=\"write_key\",\n  batch_size=20,\n  on_error=(status, error) -> @error \"[status] error\",\n  host=\"customhost.com\"\n)\n\n\n\n\n\n","category":"type"},{"location":"API/analytics/#SegmentAnalytics.track","page":"Analytics","title":"SegmentAnalytics.track","text":"Tracks an event\n\nArguments\n\nanalytics::Analytics\nattrs::Dict: Event payload\n\nPossible attrs\n\nevent::String: Event name\nproperties::Dict: Event properties (optional)\nanonymous_id::String: ID for a user when you don't know who they are yet. (optional but you must provide either an anonymous_id or user_id)\ncontext::Dict: (optional)\nintegrations::Dict:  What integrations this event goes to (optional)\nmessage_id::String: ID that uniquely identifies a message across the API. (optional)\ntimestamp::Union{DateTime, ZonedDateTime}: When the event occurred (optional)\nuser_id::String: The ID for this user in your database (optional but you must provide either an anonymous_id or user_id)\noptions::Dict: Options such as user traits (optional)\n\nExample\n\nusing SegmentAnalytics\n\nanalytics = SegmentAnalytics.Analytics(write_key=\"write_key\")\npayload = Dict(\n  :event => \"Event Name\",\n  :user_id => \"User ID\",\n  :properties => Dict(:p1 => 1, :p2 => 2),\n  :message_id => \"custom-message-id\"\n)\n\ntrack(analytics, payload)\n\n\n\n\n\n","category":"function"},{"location":"#SegmentAnalytics.jl","page":"Home","title":"SegmentAnalytics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SegmentAnalytics.jl: Julia solutiuon for track analytics using Segment API. For more details check: https://segment.com/docs/api/public-api/","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"]add SegmentAnalytics","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use SegmentAnalytics, you must initialize the Analytics structure using your write key and custom settings, if necessary, and then call the required method associated with the Segment API method. Currently, only the track() method is available.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using SegmentAnalytics\n\nanalytics = SegmentAnalytics.Analytics(write_key=\"write_key\")\npayload = Dict(\n  :event => \"Event Name\",\n  :user_id => \"User ID\",\n  :properties => Dict(:p1 => 1, :p2 => 2),\n  :message_id => \"custom-message-id\"\n)\n\ntrack(analytics, payload)","category":"page"},{"location":"","page":"Home","title":"Home","text":"It's recommended to use Symbol keys when it's possible for performance improvment.","category":"page"}]
}
